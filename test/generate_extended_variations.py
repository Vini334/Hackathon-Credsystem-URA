#!/usr/bin/env python3
"""
Gerador EXTENSIVO de varia√ß√µes para valida√ß√£o robusta do prompt.
Cria 120+ varia√ß√µes com erros, sotaques regionais e coloquialismos extremos.
"""

import csv
import random
import re

# Varia√ß√µes regionais brasileiras
REGIONAL_VARIATIONS = {
    'nordeste': [
        ('est√°', 't√°'), ('voc√™', 'tu'), ('cart√£o', 'cart√£ozin'),
        ('preciso', 'to precisando'), ('quero', 'queria'),
        ('meu', 'mermo'), ('n√£o', 'num'), ('senha', 'sinhazinha')
    ],
    'sul': [
        ('cart√£o', 'cart√£oz√£o'), ('preciso', 'to precisando'),
        ('n√£o', 'n√£o'), ('voc√™s', 'voc√™s'), ('falar', 'falar'),
        ('tch√™', ' tch√™'), ('bah', ' bah')
    ],
    'norte': [
        ('est√°', 'ta'), ('voc√™', 'oc√™'), ('cart√£o', 'cart√£ozin'),
        ('preciso', 'preciso'), ('maninho', ' maninho')
    ],
}

# Erros de digita√ß√£o comuns
TYPOS = [
    ('cart√£o', 'cartao'), ('cart√£o', 'cartaum'), ('cart√£o', 'cat√£o'),
    ('senha', 'cemha'), ('senha', 'cenha'), ('limite', 'limiti'),
    ('fatura', 'faturra'), ('boleto', 'boleto'), ('seguro', 'ceguro'),
    ('negocia√ß√£o', 'negocia√ßao'), ('acordo', 'ac√¥rdo'),
    ('dispon√≠vel', 'disponivel'), ('c√≥digo', 'codigo'),
]

# G√≠rias e express√µes informais extremas
INFORMAL = [
    'a√≠', 'n√©', 'mano', 'v√©i', 'irm√£o', 'cara', 'pow', 'rapaz',
    'mo√ßo', '√≥', 'ei', 'psiu', 'fala', 'e a√≠'
]

# Base de varia√ß√µes por servi√ßo (16 servi√ßos)
SERVICE_TEMPLATES = {
    1: [  # Consulta Limite
        "quanto eu tenho pra usar",
        "limete disponivel",
        "qto tem d limite",
        "num sei qto tenho",
        "meu limite ta quanto",
        "qero sabe meu limite tch√™",
        "qndo fecha a fatura mermo",
        "dia d vencimento",
    ],
    2: [  # Segunda via boleto acordo
        "precizu do boleto do acordo",
        "boleto da negocia√ßao",
        "reimprimir boleto ac√¥rdo",
        "num tenho o boleto do acordo",
        "cade boleto pra pagar acordo",
        "segunda via boletu acordo",
        "codigo de barras acordo maninho",
        "queria o boleto do acordo",
    ],
    3: [  # Segunda via fatura
        "manda a fatura ai",
        "num recebi minha faturra",
        "segunda via da fatura rapaz",
        "boleto pra pagar cartao",
        "preciso da fatura do mes",
        "reimprimir faturazinha",
        "codigo barras fatura",
        "qero minha fatura n√©",
    ],
    4: [  # Status Entrega
        "cade meu cart√£ozin",
        "o cartao num cheg√¥ ainda",
        "qndo chega meu cartao",
        "onde ta o cartao q pedi",
        "rastreia cartao pra mim",
        "cart√£o ta demorando demais v√©i",
        "num chegou meu cartao ainda",
        "previsao d entrega do cartao",
    ],
    5: [  # Status cart√£o
        "meu cartao num ta passando",
        "cartao ta recusado",
        "num consegui passa o cartao",
        "cart√£o num funciona",
        "problema com meu cart√£o a√≠",
        "cartao ta bloqueado ou q",
        "por q o cartao num passa",
        "cart√£ozin num ta funcionando",
    ],
    6: [  # Aumento limite
        "qero mais limiti",
        "aumenta meu limite ai",
        "preciso d mais limite urgente",
        "meu limete ta baixo demais",
        "como faz pra ter mais limite",
        "solicitar aumento d limite tch√™",
        "limete muito pequeno",
        "qeria um limite maior",
    ],
    7: [  # Cancelamento
        "vo cancela esse cartao",
        "qero encerra o cart√£o",
        "num qero mais esse cartao",
        "como cancelu",
        "desiste do cart√£o pow",
        "bloqueia cart√£o definitivo",
        "cancelamento d cartao",
        "queria cancela o cart√£ozin",
    ],
    8: [  # Seguradoras
        "telefoni da seguradora",
        "qero cancela o ceguro",
        "numero do seguro do cart√£o",
        "como fala com seguradora",
        "contato da seguradora ai",
        "assistencia do cart√£o",
        "cancela assist√™ncia",
        "preciso do tel do seguro",
    ],
    9: [  # Desbloqueio
        "desbloqueia cartao pra mim",
        "qero ativa o cart√£o novo",
        "como faiz pra desbloquea",
        "cart√£o pra uso imediatu",
        "desbloqueio pra compras",
        "libera meu cartao ai",
        "ativar cart√£ozin novo",
        "preciso desbloquear urgente",
    ],
    10: [  # Senha
        "esqueci minha cemha",
        "num lembro a senha do cart√£o",
        "trocar sinhazinha",
        "precisu d nova senha",
        "recupera senha pra mim",
        "cenha bloqueada",
        "como mudo a senha",
        "resetar senha do cartao",
    ],
    11: [  # Perda/roubo
        "perdi meu cart√£ozin",
        "roubaram o cartao",
        "cart√£o furtado v√©i",
        "extravio d cart√£o",
        "bloqueia cartao por roubo",
        "num acho mais o cart√£o",
        "me roubaram e levaram cartao",
        "perda do cart√£o urgente",
    ],
    12: [  # Consulta Saldo
        "quanto tem na minha conta",
        "qero consulta saldo",
        "qual meu saldo atual",
        "saldo disponivel na conta",
        "extrato da conta correnti",
        "tem quanto na conta",
        "saldo conta corrente",
        "ver saldo da conta",
    ],
    13: [  # Pagamento contas
        "qero pagar minha fatura",
        "pagar boleto aqui",
        "vou fazer um pagamento",
        "efetua pagamento pra mim",
        "queria pagar a fatura",
        "pagamento d conta",
        "pagar fatura do cart√£o",
        "fazer pagamento urgente",
    ],
    14: [  # Reclama√ß√µes
        "qero faze uma queixa",
        "abrir reclama√ßao",
        "registra esse problema ai",
        "protocolo d reclama√ß√£o",
        "reclama do atendimento",
        "num to satisfeito",
        "queria faze uma reclama√ß√£o",
        "fazer queixa urgente",
    ],
    15: [  # Atendimento humano
        "qero fala com gente",
        "transfere pra atendenti",
        "preciso d um humano ai",
        "falar com pessoa",
        "atendente humano por favor",
        "me passa pra alguem",
        "queria fala com atendente",
        "atendimento pessoal urgente",
    ],
    16: [  # Token proposta
        "codigo pra fazer cart√£o",
        "token da proposta ai",
        "recebe codigo do cartao",
        "numero d token",
        "proposta tokem",
        "codigo d token da proposta",
        "token pra faze meu cartao",
        "queria o token da proposta",
    ],
}


def apply_random_variations(text):
    """Aplica varia√ß√µes aleat√≥rias para simular fala natural."""
    result = text.lower()

    # Regional (30% chance)
    if random.random() < 0.3:
        region = random.choice(list(REGIONAL_VARIATIONS.keys()))
        for original, variation in REGIONAL_VARIATIONS[region]:
            if original in result:
                result = result.replace(original, variation, 1)
                break

    # Typos (20% chance)
    if random.random() < 0.2:
        for original, typo in random.sample(TYPOS, min(3, len(TYPOS))):
            if original in result:
                result = result.replace(original, typo, 1)
                break

    # Informal (40% chance)
    if random.random() < 0.4:
        word = random.choice(INFORMAL)
        if random.random() > 0.5:
            result = f"{word}, {result}"
        else:
            result = f"{result} {word}"

    # Remove pontua√ß√£o (30% chance)
    if random.random() < 0.3:
        result = result.replace('?', '').replace('!', '').replace(',', '')

    return result


def generate_extended_test_set(output_file='test/extended_variations.csv', num_variations=8):
    """Gera conjunto estendido de testes com 120+ varia√ß√µes."""

    all_tests = []

    # Mapeamento de IDs para nomes de servi√ßos
    service_names = {
        1: "Consulta Limite / Vencimento do cart√£o / Melhor dia de compra",
        2: "Segunda via de boleto de acordo",
        3: "Segunda via de Fatura",
        4: "Status de Entrega do Cart√£o",
        5: "Status de cart√£o",
        6: "Solicita√ß√£o de aumento de limite",
        7: "Cancelamento de cart√£o",
        8: "Telefones de seguradoras",
        9: "Desbloqueio de Cart√£o",
        10: "Esqueceu senha / Troca de senha",
        11: "Perda e roubo",
        12: "Consulta do Saldo",
        13: "Pagamento de contas",
        14: "Reclama√ß√µes",
        15: "Atendimento humano",
        16: "Token de proposta",
    }

    # Gerar varia√ß√µes para cada servi√ßo
    for service_id, templates in SERVICE_TEMPLATES.items():
        service_name = service_names[service_id]

        # Usar templates + aplicar varia√ß√µes
        for template in templates:
            # Template original
            all_tests.append({
                'service_id': service_id,
                'service_name': service_name,
                'intent': template
            })

            # Gerar varia√ß√£o adicional
            if len(all_tests) < 120:
                variation = apply_random_variations(template)
                if variation != template:  # S√≥ adiciona se for diferente
                    all_tests.append({
                        'service_id': service_id,
                        'service_name': service_name,
                        'intent': variation
                    })

    # Embaralhar
    random.shuffle(all_tests)

    # Limitar a 120
    all_tests = all_tests[:120]

    # Salvar CSV com separador ;
    with open(output_file, 'w', encoding='utf-8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['service_id', 'service_name', 'intent'], delimiter=';')
        writer.writeheader()
        writer.writerows(all_tests)

    print(f"‚úÖ Gerado {len(all_tests)} testes extensivos em {output_file}")
    print(f"üìä ~{len(all_tests)//16} varia√ß√µes por servi√ßo")

    # Estat√≠sticas
    services_count = {}
    for test in all_tests:
        sid = test['service_id']
        services_count[sid] = services_count.get(sid, 0) + 1

    print(f"\nüìà Distribui√ß√£o:")
    for sid in sorted(services_count.keys()):
        print(f"   Servi√ßo {sid}: {services_count[sid]} testes")


if __name__ == '__main__':
    print("üîß Gerando 120 testes extensivos com varia√ß√µes brasileiras extremas...\n")
    generate_extended_test_set()
    print("\nüí° Execute: go run test/test_csv_semicolon.go test/extended_variations.csv")
